
class DataGenerator:

    def __init__(self):
        pass


    def readImage(self, path):
        image = mpimg.imread(path.strip())
        return image
    


    def validationGenerator(self, samples, batch_size=32):
        num_samples = len(samples)
        images = np.empty([batch_size, self.IMAGE_HEIGHT,
                           self.IMAGE_WIDTH, self.IMAGE_CHANNELS])
        steer_angles = np.empty(batch_size)
        while 1:  # Loop forever so the generator never terminates
            samples = shuffle(samples)
            for offset in range(0, num_samples, batch_size):
                batch_samples = samples[offset:offset + batch_size]
                i = 0 
                for row in batch_samples:
                    image_path = row[self.CENTER)
                    image  = self.readImage(image_path)
                    angle =  row[3]
                    images[i] = image
                    steer_angles[i] = angle
                    i = i + 1
                    if i ==  batch_size:
                        break
                yield images, steer_angles

        
    def testGenerator(self, samples, batch_size=32):
        num_samples = len(samples)
        images = np.empty([batch_size, self.IMAGE_HEIGHT,
                           self.IMAGE_WIDTH, self.IMAGE_CHANNELS])
        steer_angles = np.empty(batch_size)
        while 1:  # Loop forever so the generator never terminates
            samples = shuffle(samples)
            for offset in range(0, num_samples, batch_size):
                batch_samples = samples[offset:offset + batch_size]
                i = 0 
                for row in batch_samples:
                    image = getAugmentedImage(self, image_path,
                                      augment_func)
                    angle = self.getAugmentedAngle(self.CENTER, row)
                    images[i] = image
                    steer_angles[i] = angle
                    i = i + 1
                    if i ==  batch_size:
                        break
                yield images, steer_angles


    def getAugmentedAngle(self, camera_name, row):
        angle = getSteeringAngle(row, 3)
        return angle

    
    def getAugmentedImage(self, image_path,
                          augment_func):

        path_prefix = "data/"
        image_path = row[camera_name]
        image  = None
        steering_angle = None
        path = path_prefix + image_path.strip()
        image =readImage(path)
        return image

                
    def getAugmentedSample(self, row):
        # always get the center image
        STEERING_IDX = 3
        steering_angle = getSteeringAngle(row, STEERING_IDX):
        image = self.getAugmentedImage(self.CENTER,
                                       row,
                                       self.augment_func)
                                       

        return image, steering_angle

    
